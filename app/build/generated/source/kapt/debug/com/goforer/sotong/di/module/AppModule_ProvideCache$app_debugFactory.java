// Generated by Dagger (https://dagger.dev).
package com.goforer.sotong.di.module;

import android.app.Application;
import com.goforer.sotong.data.datasource.model.cache.Cache;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideCache$app_debugFactory implements Factory<Cache> {
  private final AppModule module;

  private final Provider<Application> appProvider;

  public AppModule_ProvideCache$app_debugFactory(AppModule module,
      Provider<Application> appProvider) {
    this.module = module;
    this.appProvider = appProvider;
  }

  @Override
  public Cache get() {
    return provideCache$app_debug(module, appProvider.get());
  }

  public static AppModule_ProvideCache$app_debugFactory create(AppModule module,
      Provider<Application> appProvider) {
    return new AppModule_ProvideCache$app_debugFactory(module, appProvider);
  }

  public static Cache provideCache$app_debug(AppModule instance, Application app) {
    return Preconditions.checkNotNull(instance.provideCache$app_debug(app), "Cannot return null from a non-@Nullable @Provides method");
  }
}

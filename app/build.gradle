apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-allopen'
apply plugin: 'com.google.gms.google-services'

android {
    compileSdkVersion 29
    defaultConfig {
        aaptOptions.cruncherEnabled = false
        aaptOptions.useNewCruncher = false
        multiDexEnabled true
        applicationId "com.megazone.megatong"
        minSdkVersion 23
        //noinspection OldTargetApi
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        maxSdkVersion 29
        signingConfig signingConfigs.debug
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath false
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    dataBinding {
        enabled = true
    }

    buildTypes {
        debug {
            testCoverageEnabled !project.hasProperty('android.injected.invoked.from.ide')
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled true
            multiDexKeepFile file('multidex-config.txt')
            multiDexKeepProguard file('multidex-config.pro')
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.kotlin.srcDirs += "src/test-common/kotlin"
        test.kotlin.srcDirs += "src/test-common/kotlin"
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        lintConfig rootProject.file('lint.xml')
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            suppressWarnings = true
            jvmTarget = '1.8'
            apiVersion = '1.4'
            languageVersion = '1.4'
        }
    }

    productFlavors {
    }
    buildToolsVersion = '29.0.2'

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        // Sets Java compatibility to Java 8
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

kapt {
    useBuildCache = true
}

androidExtensions {
    experimental = true
}

repositories {
    mavenCentral()
    jcenter()

    maven {
        url 'https://maven.fabric.io/public'
    }

    maven {
        url 'https://maven.google.com/'
        name 'Google'
    }
}

dependencies {
    //noinspection GradleCompatible
    implementation "androidx.core:core-ktx:$androidx_core_ktx_version"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_version"
    implementation "androidx.cardview:cardview:$androidx_version"
    implementation "androidx.browser:browser:$androidx_version"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "androidx.multidex:multidex:$androidx_multidex_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"
    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$arch_lifecycle_version"
    // alternatively, just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$arch_lifecycle_version"
    // alternatively, just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$arch_livedata_ktx"
    // Lifecycles only (no ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime:$arch_lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_lifecycle_ktx"
    implementation "androidx.lifecycle:lifecycle-common-java8:$arch_lifecycle_version"
    implementation "androidx.legacy:legacy-support-v4:1.0.0"

    // Room (use 1.1.0-alpha1 for latest alpha)
    implementation "androidx.room:room-runtime:$arch_room_version"
    implementation "androidx.room:room-ktx:$arch_room_ktx"
    implementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "androidx.work:work-runtime-ktx:$arch_workmanager_version"
    implementation "androidx.work:work-rxjava2:$arch_workmanager_version"
    implementation "androidx.work:work-gcm:$arch_workmanager_version"
    annotationProcessor "androidx.room:room-compiler:$arch_room_version"
    kapt "androidx.room:room-compiler:$arch_room_version"
    // Paging
    implementation "androidx.paging:paging-runtime:$arch_paging_runtime_version"
    // Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$arch_version"
    // Test helpers for Room
    testImplementation "androidx.room:room-testing:$arch_room_version"
    // RxJava support for Room
    implementation 'androidx.room:room-rxjava2:2.2.1'
    // ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$arch_lifecycle_version"

    implementation "com.google.android.material:material:$design_support_version"
    implementation "com.google.android.gms:play-services-maps:$google_play_service_maps_version"
    implementation "com.google.android.gms:play-services-base:$google_play_service_base_version"
    implementation "com.google.android.gms:play-services-auth:$google_play_service_auth_version"
    implementation "com.google.android.gms:play-services-gcm:$google_play_service_other_version"
    implementation "com.google.firebase:firebase-core:$google_firebase_core_version"
    implementation "com.google.firebase:firebase-auth:$google_firebase_auth_version"
    implementation "com.google.firebase:firebase-messaging:$google_firebase_messaging_version"
    implementation "com.google.firebase:firebase-analytics:$google_play_service_analytics"

    kapt 'com.android.tools.build.jetifier:jetifier-core:1.0.0-beta07'
    annotationProcessor 'com.android.tools.build.jetifier:jetifier-core:1.0.0-beta07'

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0'

    //noinspection GradleDependency
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp3_version"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okhttp3_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"

    implementation "com.google.code.gson:gson:$gson_version"

    implementation "org.greenrobot:eventbus:$eventbus_version"

    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    implementation "com.github.bumptech.glide:annotations:$glide_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    annotationProcessor "com.github.bumptech.glide:compiler:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$android_dagger_version"
    implementation "com.google.dagger:dagger-android-support:$android_dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "com.mikepenz:materialdrawer:6.1.1"
    implementation "com.mikepenz:iconics-core:3.1.0"
    implementation "com.mikepenz:iconics-views:3.1.0"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.3.original@aar'
    implementation 'com.mikepenz:material-design-iconic-typeface:2.2.0.5@aar'
    implementation 'com.mikepenz:fontawesome-typeface:5.3.1.1@aar'
    implementation 'com.mikepenz:typeicons-typeface:2.0.7.5@aar'

    implementation 'com.github.orangegangsters:swipy:1.2.3@aar'

    implementation 'com.elmargomez.typer:typerlib:1.0.0'

    implementation 'com.huanhailiuxin.view:coolviewpager:1.0.0'

    implementation 'com.github.rubensousa:gravitysnaphelper:2.0'

    implementation 'com.oguzdev:CircularFloatingActionMenu:1.0.2'

    //noinspection GradleDependency
    implementation 'com.facebook.android:facebook-android-sdk:[4,5)'
    implementation 'com.facebook.android:facebook-login:4.42.0'

    implementation 'com.ramotion.foldingcell:folding-cell:1.2.2'

    implementation 'com.andkulikov:transitionseverywhere:1.8.0'

    implementation 'com.github.chrisbanes:PhotoView:2.1.3'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'

    implementation 'com.github.clans:fab:1.6.4'

    implementation 'com.github.sephiroth74:android-target-tooltip:2.0.4'

    implementation "im.ene.toro3:toro:$toro_version"
    implementation "im.ene.toro3:toro-ext-exoplayer:$toro_version"
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayer_version"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayer_version"
    implementation "com.google.android.exoplayer:extension-ima:$exoplayer_version"

    implementation "com.zhihu.android:matisse:$matisse_version"

    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$mockwebserver_version"
    testImplementation("androidx.arch.core:core-testing:$arch_version", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    androidTestImplementation "androidx.appcompat:appcompat:$androidx_appcompat_version"
    androidTestImplementation "androidx.recyclerview:recyclerview:$androidx_version"

    //noinspection GradleCompatible
    androidTestImplementation "androidx.legacy:legacy-support-v4:$androidx_version"
    androidTestImplementation "com.google.android.material:material:$androidx_version"
    androidTestImplementation("androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation("androidx.arch.core:core-testing:$arch_version", {
    })
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task fullCoverageReport(type: JacocoReport) {
    dependsOn 'createDebugCoverageReport'
    dependsOn 'testDebugUnitTest'
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                      '**/*Test*.*', 'android/**/*.*',
                      '**/*_MembersInjector.class',
                      '**/Dagger*Component.class',
                      '**/Dagger*Component$Builder.class',
                      '**/*_*Factory.class',
                      '**/*ComponentImpl.class',
                      '**/*SubComponentBuilder.class']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/kotlin"

    getClassDirectories().setFrom(([mainSrc]))
    getClassDirectories().setFrom(files([debugTree]))
    getExecutionData().setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ]))
}
